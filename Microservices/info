Um Kubernetes lokal mit Docker Desktop zu nutzen und ein eigenes Docker-Image zu integrieren, folge diesen Schritten:

### 1. **Docker Desktop mit Kubernetes aktivieren**

Zuerst musst du sicherstellen, dass Docker Desktop auf deinem Rechner installiert ist und Kubernetes aktiviert ist.

1. **Docker Desktop installieren**:

   - Lade Docker Desktop von [der offiziellen Docker-Website](https://www.docker.com/products/docker-desktop) herunter und installiere es.

2. **Kubernetes aktivieren**:

   - Öffne Docker Desktop und gehe zu den **Einstellungen** (⚙️-Symbol in der oberen rechten Ecke).
   - Wähle den Tab **Kubernetes**.
   - Aktiviere die Option **Enable Kubernetes** und klicke auf **Apply & Restart**.
   - Docker Desktop wird nun Kubernetes starten und den Cluster lokal bereitstellen.

### 2. **Prüfen, ob Kubernetes läuft**

Nachdem Kubernetes aktiviert wurde, kannst du mit `kubectl` (Kubernetes Command Line Tool) überprüfen, ob dein Cluster läuft.

- Öffne die Kommandozeile (Terminal) und führe folgenden Befehl aus:

  ```bash
  kubectl get nodes
  ```

  Wenn alles korrekt funktioniert, solltest du einen oder mehrere Knoten des Clusters sehen.

### 3. **Docker-Image erstellen**

Nun kannst du dein Docker-Image erstellen. Gehe in das Verzeichnis, das die `Dockerfile` enthält, und führe folgenden Befehl aus:

```bash
docker build -t mein-image:latest .
```

Dieser Befehl erstellt ein Docker-Image mit dem Tag `mein-image:latest` aus der `Dockerfile` im aktuellen Verzeichnis.

### 4. **Image in das lokale Docker-Repository von Kubernetes einfügen**

Docker Desktop verwendet standardmäßig ein eigenes Docker-Repository für Kubernetes. Um sicherzustellen, dass dein erstelltes Image in Kubernetes verfügbar ist, musst du es im richtigen Docker-Repository verfügbar machen.

Da Docker Desktop für Kubernetes den Docker-Host von Docker Desktop selbst verwendet, kannst du das Image einfach wie gewohnt pushen.

Falls du das Image manuell in Kubernetes verfügbar machen möchtest, kannst du es mit dem folgenden Befehl sicherstellen:

```bash
docker tag mein-image:latest localhost:5000/mein-image:latest
```

Dann kannst du das Image ins lokale Repository laden (falls du ein eigenes lokales Repository eingerichtet hast), indem du es taggst und dann pushst.

### 5. **Deployment in Kubernetes erstellen**

Jetzt kannst du ein Kubernetes-Deployment erstellen, um dein Image in einem Pod zu starten.

1. Erstelle eine YAML-Datei für dein Deployment, zum Beispiel `mein-deployment.yaml`:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mein-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mein-app
  template:
    metadata:
      labels:
        app: mein-app
    spec:
      containers:
        - name: mein-app-container
          image: mein-image:latest
          ports:
            - containerPort: 80
```

2. Erstelle das Deployment in Kubernetes:

```bash
kubectl apply -f mein-deployment.yaml
```

3. Überprüfe, ob das Deployment erfolgreich war:

```bash
kubectl get pods
```

### 6. **Zugriff auf die Anwendung**

Wenn alles richtig konfiguriert ist, kannst du über Kubernetes auf dein Deployment zugreifen. Zum Beispiel kannst du einen **Service** erstellen, um das Deployment im Cluster erreichbar zu machen.

Erstelle eine `service.yaml`-Datei:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: mein-app-service
spec:
  selector:
    app: mein-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
```

Anschließend:

```bash
kubectl apply -f service.yaml
```

Nun kannst du den Service aufrufen und deine Anwendung überprüfen:

```bash
kubectl get svc
```

Für den lokalen Zugriff auf die Anwendung kannst du mit `kubectl port-forward` arbeiten, um den Service auf deinen lokalen Rechner weiterzuleiten:

```bash
kubectl port-forward service/mein-app-service 8080:80
```

Jetzt solltest du deine Anwendung unter `http://localhost:8080` erreichen können.

### Zusammenfassung

1. Docker Desktop installieren und Kubernetes aktivieren.
2. Dein Docker-Image erstellen.
3. Das Image in Kubernetes deployen.
4. Einen Service einrichten, um darauf zuzugreifen.

Wenn du weitere Fragen hast oder Probleme auftauchen, lass es mich wissen!
